import networkx as nx

# read file
with open("dict.txt") as fp:
    lines = fp.readlines()

# добавляем в массив
array = []
for i in lines:
    ins = i.replace('\n', '')
    a, b = ins.split(' ')
    array.append(a)
    array.append(b)

# Count Vertex and Edges:
print("V = " + str(len(set(array))))
print("E = " + str(len(lines)))

arrayDeg = { i:[] for i in range(50) }

for i in lines:
    ins = i.replace('\n', '')
    a, b = ins.split(' ')
    arrayDeg[int(a)-1].append(int(b) - 1)
    arrayDeg[int(b)-1].append(int(a) - 1)

# Найдём min и max Deg графа:
deglist = []
for i in range(len(arrayDeg)):
    if (arrayDeg[i] != []):
        print(len(arrayDeg[i]), end= " ")
        deglist.append(len(arrayDeg[i]))
print()

# 3 1 6 2 7 4 4 3 2 8 2 1 3 3 4 7 7 7 5 4 4 3 2 2 3 4 2 4 4 5 2 5 8 2 7 4 4 3 2 7 3 1
# => minDeg = 1, maxDeg = 8
print("Min deg: " + str(min(deglist)) + ", max Deg: " + str(max(deglist)))


# lets add networkx lib and create Graph
G=nx.Graph()
G.add_edge(1,2)
G.add_edge(1,4)
G.add_edge(1,3)
G.add_edge(4,3)
G.add_edge(3,47)
G.add_edge(3,5)
G.add_edge(3,6)
G.add_edge(3,8)
G.add_edge(8,9)
G.add_edge(9,11)
G.add_edge(10,11)
G.add_edge(8,10)
G.add_edge(6,10)
G.add_edge(7,10)
G.add_edge(6,7)
G.add_edge(10,14)
G.add_edge(10,20)
G.add_edge(10,17)
G.add_edge(10,18)
G.add_edge(7,5)
G.add_edge(7,18)
G.add_edge(5,6)
G.add_edge(5,18)
G.add_edge(17,18)
G.add_edge(17,21)
G.add_edge(17,20)
G.add_edge(18,21)
G.add_edge(20,21)
G.add_edge(18,19)
G.add_edge(18,23)
G.add_edge(5,23)
G.add_edge(5,25)
G.add_edge(5,26)
G.add_edge(25,26)
G.add_edge(22,23)
G.add_edge(23,19)
G.add_edge(22,19)
G.add_edge(21,19)
G.add_edge(22,24)
G.add_edge(22,35)
G.add_edge(19,35)
G.add_edge(19,34)
G.add_edge(19,37)
G.add_edge(21,37)
G.add_edge(35,34)
G.add_edge(24,35)
G.add_edge(24,27)
G.add_edge(27,35)
G.add_edge(27,28)
G.add_edge(35,32)
G.add_edge(35,30)
G.add_edge(35,28)
G.add_edge(28,30)
G.add_edge(30,32)
G.add_edge(32,34)
G.add_edge(28,31)
G.add_edge(30,31)
G.add_edge(31,32)
G.add_edge(31,33)
G.add_edge(32,33)
G.add_edge(34,36)
G.add_edge(36,37)
G.add_edge(34,37)
G.add_edge(37,38)
G.add_edge(20,37)
G.add_edge(20,38)
G.add_edge(20,29)
G.add_edge(20,39)
G.add_edge(39,38)
G.add_edge(29,39)
G.add_edge(39,40)
G.add_edge(40,41)
G.add_edge(37,42)
G.add_edge(38,42)
G.add_edge(40,42)
G.add_edge(41,42)
G.add_edge(16,42)
G.add_edge(15,16)
G.add_edge(15,43)
G.add_edge(16,43)
G.add_edge(42,43)
G.add_edge(42,15)

# check Count Vertex and Edges:
print("E = " + str(G.number_of_nodes()))
print("V = " + str(G.number_of_edges()))

list = nx.center(G)

list4 = nx.center(G)
list5 = nx.center(G)



# Найдем минимальные расстояния от вершины i до всех смежных вершин j
listo = { i:[] for i in range(G.number_of_nodes()) }

for i in range(1, G.number_of_nodes() + 1):
    for j in range(1, G.number_of_nodes() + 1):
        if (G.has_node(i) and G.has_node(j) and i != j):
            dist = nx.shortest_path(G, source=i, target=j)
            listo[i-1].append(len(dist) - 1)

exentr = []
# Посчитаем эксцинтреситеты и сразу занесем их в массив:
for i in range(len(listo)):
    if (len(listo[i]) != 0):
        listo[i] = {max(set(listo[i]))}
        exentr.append(max(set(listo[i])))

# Тогда радуис будет min массива, а диаметр будет max:
radius = min(exentr)
diam = max(exentr)
print("radius: " + str(radius) + ", diam: " + str(diam))

# Проверка библиотекой networkx:
print("check")
print("radius: " + str(nx.radius(G)) + ", diam: " + str(nx.diameter(G)))


# Найдём center(G):
listCenter = []
for i in range(len(listo)):
    if (len(listo[i]) != 0):
        for j in listo[i]:
            if (j == radius):
                listCenter.append(i + 1)
print("center:", end =" ")
print(listCenter)
print("check")
print("center: " + str(nx.center(G)))

